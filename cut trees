-- Load Rayfield UI safely
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)
if not success or not Rayfield then
    warn("[ERROR] Rayfield failed to load.")
    return
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local p = Players.LocalPlayer

local speed = 0.25
local running = false
local toggleDebounce = false
local selectedNumbers = {}
local selectedSizes = {"Normal"}
local selectedChests = {}
local walkSpeedEnabled = false
local walkSpeedValue = 16

local chestNumbers = {"Chest1","Chest2","Chest3","Chest4","Chest5","Chest6","Chest7","Chest8","Chest9"}
local sizes = {"Normal","Huge","Giant"}

local preloadPositionsWorld1 = {
    CFrame.new(-117.946877,2.99999976,-119.732292,0.938620865,-6.28182093e-08,-0.344950527,3.39390738e-08,1,-8.97586361e-08,0.344950527,7.25420222e-08,0.938620865),
    CFrame.new(-427.63089,2.99999976,-470.858826,0.999831736,3.24923803e-08,-0.0183434114,-3.38455663e-08,1,-7.34592049e-08,0.0183434114,7.40676924e-08,0.999831736),
    CFrame.new(-765.45697,2.99999976,-117.558113,0.552651286,-3.24929306e-09,0.833412588,-8.79842754e-10,1,4.48222082e-09,-0.833412588,-3.2103773e-09,0.552651286),
    CFrame.new(-768.879211,2.99999976,-830.553589,-0.349449307,1.25390693e-08,-0.936955273,5.92167986e-08,1,-8.70287042e-09,0.936955273,-5.85247051e-08,-0.349449307),
    CFrame.new(-128.130157,2.99999976,-807.63031,-0.0282585509,4.16342587e-08,0.999600649,6.24399661e-08,1,-3.98857232e-08,-0.999600649,6.12879134e-08,-0.0282585509),
}

local preloadPositionsWorld2 = {
    CFrame.new(-1592.31494,3,-157.627014,0.73739326,8.06655454e-09,-0.675463676,8.56398952e-09,1,2.1291422e-08,0.675463676,-2.14848139e-08,0.73739326),
    CFrame.new(-1371.19775,2.99999976,-482.130798,-0.0467111431,-6.87301327e-09,-0.99890846,-4.08161993e-09,1,-6.68965816e-09,0.99890846,3.76468323e-09,-0.0467111431),
    CFrame.new(-1633.50366,2.99999976,-810.747986,0.0395039506,3.099289e-08,-0.999219418,-2.3446578e-08,1,3.00901455e-08,0.999219418,2.22395951e-08,0.0395039506),
    CFrame.new(-1002.71967,2.99999976,-797.11322,-0.801489711,-7.99175055e-08,0.598008573,-8.14178591e-08,1,2.45179255e-08,-0.598008573,-2.90377145e-08,-0.801489711),
    CFrame.new(-1007.3421,2.99999976,-148.506363,-0.950502634,-1.2043057e-07,0.31071645,-1.15136729e-07,1,3.53788998e-08,-0.31071645,-2.14713936e-09,-0.950502634),
}

local function updateSelectedChests()
    selectedChests = {}
    if #selectedSizes == 0 then selectedSizes = {"Normal"} end
    for _, num in ipairs(selectedNumbers) do
        for _, size in ipairs(selectedSizes) do
            local suffix = size == "Huge" and "_Huge" or (size == "Giant" and "_Giant" or "")
            table.insert(selectedChests, num .. suffix)
        end
    end
end

local function getAllChestsOfType(chestType)
    local chests = {}
    local chestFolder = workspace:FindFirstChild("ChestFolder") or workspace
    local function scanFolder(folder)
        for _, chest in ipairs(folder:GetChildren()) do
            if chest.Name == chestType and chest:IsA("Model") and (chest:FindFirstChild("Hitpart") or chest:FindFirstChildOfClass("ProximityPrompt")) then
                table.insert(chests, chest)
            elseif chest:IsA("Folder") or chest:IsA("Model") then
                scanFolder(chest)
            end
        end
    end
    scanFolder(chestFolder)
    return chests
end

local function verifySelectedChests()
    if #selectedChests == 0 then
        print("[DEBUG] No chests selected.")
        return
    end
    local total = 0
    for _, fullType in ipairs(selectedChests) do
        local count = #getAllChestsOfType(fullType)
        total = total + count
        print("[DEBUG] '" .. fullType .. "': " .. count)
    end
    print("[DEBUG] Total selected chests: " .. total)
end

local function simulatePressE(duration)
    UserInputService.InputBegan:Fire({UserInputType=Enum.UserInputType.Keyboard, KeyCode=Enum.KeyCode.E})
    task.wait(duration or 0.25)
    UserInputService.InputEnded:Fire({UserInputType=Enum.UserInputType.Keyboard, KeyCode=Enum.KeyCode.E})
end

local function teleportOnce(chestModel)
    pcall(function()
        local hrp = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
        if not hrp or not chestModel then return end
        local hitPart = chestModel:FindFirstChild("Hitpart")
        if not hitPart then return end
        hrp.CFrame = CFrame.lookAt(hitPart.Position + Vector3.new(0,3,0), hitPart.Position)
        task.wait(0.2)
        local prompt = hitPart:FindFirstChildOfClass("ProximityPrompt") or chestModel:FindFirstChildOfClass("ProximityPrompt")
        if prompt then
            local ok = pcall(function() fireproximityprompt(prompt) end)
            if not ok or prompt.Enabled then simulatePressE(prompt.HoldDuration or 0.3) end
        else
            local clickDetector = hitPart:FindFirstChildOfClass("ClickDetector") or chestModel:FindFirstChildOfClass("ClickDetector")
            if clickDetector then fireclickdetector(clickDetector) end
        end
    end)
end

local function preloadChests()
    local hrp = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then warn("[DEBUG] No character for preload.") return end
    local originalCFrame = hrp.CFrame
    local currentChar = p.Character

    local combinedPositions = {}
    for _, cf in ipairs(preloadPositionsWorld1) do table.insert(combinedPositions, cf) end
    for _, cf in ipairs(preloadPositionsWorld2) do table.insert(combinedPositions, cf) end

    for _, cf in ipairs(combinedPositions) do
        if p.Character ~= currentChar then return end
        hrp.CFrame = cf
        task.wait(0.1)
    end

    if p.Character == currentChar then
        hrp.CFrame = originalCFrame
        print("[DEBUG] Returned to original position after preload.")
    else
        warn("[WARN] Character changed, cannot return to original position.")
    end
end

task.spawn(function()
    while true do
        if not running then task.wait(0.1) continue end
        if #selectedChests == 0 or not p.Character or not p.Character:FindFirstChild("HumanoidRootPart") then task.wait(0.5) continue end
        local count = 0
        for _, chestType in ipairs(selectedChests) do
            if not running then break end
            for _, chestModel in ipairs(getAllChestsOfType(chestType)) do
                if not running or not chestModel.Parent then break end
                if not p.Character or not p.Character:FindFirstChild("HumanoidRootPart") then
                    local timeout = 0
                    repeat task.wait(0.1) timeout=timeout+0.1 until (p.Character and p.Character:FindFirstChild("HumanoidRootPart")) or timeout>=10
                    if timeout>=10 then running=false return end
                    task.wait(1)
                end
                teleportOnce(chestModel)
                task.wait(speed + math.random()*0.05)
                count = count + 1
                if count>200 then break end
            end
        end
        if running then task.wait(1 + math.random()*0.5) end
    end
end)

local Window = Rayfield:CreateWindow({
    Name = "Cut Trees",
    LoadingTitle = "Cut Trees Script",
    LoadingSubtitle = "by Toqxsicx",
    ConfigurationSaving = {
        Enabled=true,
        FolderName="ChestCollectorMisc",
        FileName="Config"
    },
    KeySystem=false
})

local MainTab = Window:CreateTab("Main")
local MovementTab = Window:CreateTab("Movement")
local TeleportTab = Window:CreateTab("Teleport Worlds")
local MiscTab = Window:CreateTab("Misc")
local EspTab = Window:CreateTab("Esp") -- Added Esp tab here

MainTab:CreateToggle({
    Name = "Auto Collect Selected Chests",
    CurrentValue = false,
    Callback = function(v)
        if toggleDebounce then return end
        toggleDebounce = true
        running = v
        task.wait(0.2)
        toggleDebounce = false
    end,
})

MainTab:CreateSlider({
    Name = "Teleport Speed",
    Range = {0.05, 5},
    Increment = 0.05,
    Suffix = "s",
    CurrentValue = speed,
    Flag = "SpeedSlider",
    Callback = function(v) speed = v end,
})

NumberDropdown = MainTab:CreateDropdown({
    Name = "Select Chest",
    Options = chestNumbers,
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "NumberDropdown",
    Callback = function(options)
        selectedNumbers = options
        updateSelectedChests()
    end,
})

SizeDropdown = MainTab:CreateDropdown({
    Name = "Chest Size",
    Options = sizes,
    CurrentOption = {"Normal"},
    MultipleOptions = true,
    Flag = "SizeDropdown",
    Callback = function(options)
        selectedSizes = options
        updateSelectedChests()
    end,
})

MainTab:CreateButton({
    Name = "Preload Chests",
    Callback = preloadChests,
})

MainTab:CreateLabel("Note: Preload Chests ensures theres no TP errors when autocollecting")

MainTab:CreateButton({
    Name = "Refresh Dropdown",
    Callback = verifySelectedChests,
})

MovementTab:CreateToggle({
    Name = "Walk Speed",
    CurrentValue = false,
    Flag = "WalkSpeedToggle",
    Callback = function(value)
        walkSpeedEnabled = value
        if not value and p.Character and p.Character:FindFirstChildOfClass("Humanoid") then
            p.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16
        end
    end,
})

MovementTab:CreateSlider({
    Name = "Walk Speed Value",
    Range = {16, 100},
    Increment = 1,
    Suffix = "",
    CurrentValue = walkSpeedValue,
    Flag = "WalkSpeedSlider",
    Callback = function(value)
        walkSpeedValue = value
        if walkSpeedEnabled and p.Character and p.Character:FindFirstChildOfClass("Humanoid") then
            p.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = value
        end
    end,
})

RunService.Stepped:Connect(function()
    if p.Character and p.Character:FindFirstChildOfClass("Humanoid") then
        local hum = p.Character:FindFirstChildOfClass("Humanoid")
        if walkSpeedEnabled then hum.WalkSpeed = walkSpeedValue end
    end
end)

TeleportTab:CreateButton({
    Name = "Teleport to World 1",
    Callback = function()
        if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            p.Character.HumanoidRootPart.CFrame = preloadPositionsWorld1[1]
        end
    end,
})

TeleportTab:CreateButton({
    Name = "Teleport to World 2",
    Callback = function()
        if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            p.Character.HumanoidRootPart.CFrame = preloadPositionsWorld2[1]
        end
    end,
})

MiscTab:CreateButton({
    Name = "Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
})

-- Esp Tab: Toggle XRAY BoolValue in GamepassFolder
EspTab:CreateToggle({
    Name = "Chest ESP",
    CurrentValue = false,
    Flag = "ChestEspToggle",
    Callback = function(value)
        local gamepassFolder = p:FindFirstChild("GamepassFolder")
        if gamepassFolder then
            local xrayBool = gamepassFolder:FindFirstChild("XRAY")
            if xrayBool and xrayBool:IsA("BoolValue") then
                xrayBool.Value = value
            else
                warn("[ESP] XRAY BoolValue not found in GamepassFolder")
            end
        else
            warn("[ESP] GamepassFolder not found in LocalPlayer")
        end
    end,
})

print("[DEBUG] Full script loaded, ESP toggle added to control XRAY BoolValue.")
